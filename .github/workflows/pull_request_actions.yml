name: Merge and pull request to main branch
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  TERRAFORM_VERSION: 1.3.5
  # TERRAGRUNT_VERSION: 0.40.0
  TERRAFORM_WORKING_DIR: './'

permissions:
  contents: write       # write permissions are needed in order to commit changes back to the branches/
  issues: write         # write permissions are needed in order to create comments
  id-token: write

concurrency: dev-reinvent    # This wills ensure only a single workflow of merge to master is run at a time

jobs:
  kics:
    # Kics perform statics codes analysis of Infrastructure of Code (Terraform).
    # More details can be found here: https://docs.kics.io/latest/
    name: "Run Kics scan on Terraform code"
    uses: ./.github/workflows/terraform_kics.yml
    with:
      # Enabling Comments will add a comment to a PR, but these do no exist in Push events and will throw an error.
      ENABLE_COMMENTS: true
      WORKING_DIRECTORY: './'
  plan:
    name: "Terragrunt Init,Validate and Plan"
    needs: [ kics ]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
           # This will checkout the branch the PR is coming from in the head repo to avoid checkoing out repo in a detached state
           ref: ${{ github.event.pull_request.head.ref }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Terragrunt Init
        id: init
        run: terragrunt run-all init -no-color --terragrunt-non-interactive
      - name: Terragrunt Validate
        id: validate
        run: terragrunt run-all validate -no-color --terragrunt-non-interactive
      - name: Terragrunt Plan
        id: plan
        run: |
         terragrunt run-all plan -no-color --terragrunt-non-interactive >/dev/null -out=tfplan #terragrunt run-all plan -no-color --terragrunt-non-interactive
         terragrunt show tfplan
        continue-on-error: true
  apply:
    name: "Terragrunt Apply"
    if: github.event_name == 'push'
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - name: 'checkout'
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terragrunt Init
        id: init
        run : terragrunt run-all init -no-color --terragrunt-non-interactive
      - name: Terragrunt Apply
        id: apply
        run: terragrunt run-all apply -no-color --terragrunt-non-interactive
        continue-on-error: true